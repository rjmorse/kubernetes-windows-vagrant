$VirtualSwitchName = "External"

$LinuxImage = "ubuntu/xenial64"

$WindowsImage = "WindowsServer1709Docker"
$SyncedFolderType = "smb"

ClusterCIDR = "10.4.0.0/16"
ClusterCIDRShort = "10.4"

Vagrant.configure("2") do |config|

    config.vm.provider "virtualbox" do |v|
        $WindowsImage = "StefanScherer/windows_2016_docker"
        $SyncedFolderType = "virtualbox"
    end

    config.vm.define "k-builder", autostart: false do |subconfig|
        subconfig.vm.box = $LinuxImage
        subconfig.vm.hostname = "k-builder"
        subconfig.vm.synced_folder "../vagrant-synced/", "/vagrant", type: $SyncedFolderType
        subconfig.vm.provision "shell", path: "00-ubuntu.sh"
        subconfig.vm.provision "shell", path: "01-builder.sh"

        subconfig.vm.provider "hyperv" do |h|
            subconfig.vm.network :public_network, bridge: $VirtualSwitchName
            h.enable_virtualization_extensions = true
            h.differencing_disk = true
            h.cpus = 4
            h.memory = 1024
            h.maxmemory = 4096
            h.vmname = "k-builder"
        end
        subconfig.vm.provider "virtualbox" do |v|
            subconfig.vm.network :private_network, type: "dhcp"
            v.linked_clone = true
            v.memory = 1024
            v.cpus = 2
            v.name = "k-builder"
        end
    end    
    config.vm.define "k-m1" do |subconfig|
        subconfig.vm.box = $LinuxImage
        subconfig.vm.synced_folder "../vagrant-synced/", "/vagrant", type: $SyncedFolderType
        subconfig.vm.hostname = "k-m1"
        subconfig.vm.provision "shell", path: "00-ubuntu.sh"
        subconfig.vm.provision "shell", path: "01-kubernetes.sh"
        subconfig.vm.provision "shell", path: "02-master.sh", :args => [ClusterCIDR, ClusterCIDRShort]
        subconfig.vm.provider "hyperv" do |h|
            subconfig.vm.network :public_network, bridge: $VirtualSwitchName
            h.enable_virtualization_extensions = true
            h.differencing_disk = true
            h.cpus = 4
            h.memory = 5000
            h.maxmemory = 5000
            h.vmname = "k-m1"
        end
        subconfig.vm.provider "virtualbox" do |v|
            subconfig.vm.network :private_network, type: "dhcp"
            v.linked_clone = true
            v.memory = 1024
            v.cpus = 2
            v.name = "k-m1"
        end
    end
    # Not currently using Linux worker, and untested
    config.vm.define "k-l-w1", autostart: false do |subconfig|
        subconfig.vm.box = $LinuxImage
        subconfig.vm.hostname = "k-l-w1"
        subconfig.vm.provision "shell", path: "00-ubuntu.sh"
        subconfig.vm.provision "shell", path: "01-kubernetes.sh"
        subconfig.vm.provision "shell", path: "02-worker.sh"
        subconfig.vm.synced_folder "../vagrant-synced/kube", "/vagrant", type: $SyncedFolderType
        subconfig.vm.provider "hyperv" do |h|
            subconfig.vm.network :public_network, bridge: $VirtualSwitchName
            h.enable_virtualization_extensions = true
            h.differencing_disk = true
            h.cpus = 4
            h.memory = 1024
            h.maxmemory = 4096
            h.vmname = "k-l-w1"
        end
        subconfig.vm.provider "virtualbox" do |v|
            subconfig.vm.network :private_network, type: "dhcp"
            v.linked_clone = true
            v.memory = 1024
            v.cpus = 2
            v.name = "k-l-w1"
        end
    end
    # TODO: add routes to Linux pods from Windows; depends on HNS config currently in **start-kubelet.ps1**
    # Error output below if **start-kubelet.ps1** has not be ran successfully
    # ==> k-w-w1: Running provisioner: shell...
    # k-w-w1: Running: ./01-routes.ps1 as c:\tmp\vagrant-shell.ps1
    # k-w-w1: Add-RouteToPodCIDR - available nodes linux     10.4.0.0/24
    # k-w-w1: Adding route for Remote Pod CIDR 10.4.0.0/24, GW 10.4.0.1, for node type linux
    # k-w-w1: new-netroute : Invalid parameter InterfaceAlias vEthernet (cbr0)
    # k-w-w1: At C:\k\AddRoutes.ps1:27 char:13
    # k-w-w1: +             new-netroute -InterfaceAlias "$nicName" -DestinationPrefi ...
    # k-w-w1: +             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # k-w-w1:     + CategoryInfo          : InvalidArgument: (MSFT_NetRoute:ROOT/StandardCimv2/MSFT_NetRoute) [New-NetRoute], CimExc
    # k-w-w1:    eption
    # k-w-w1:     + FullyQualifiedErrorId : Windows System Error 87,New-NetRoute
    # k-w-w1: C:\k\AddRoutes.ps1 : Do you have a virtual adapter configured? Couldn't find one!
    # k-w-w1: At C:\tmp\vagrant-shell.ps1:7 char:1
    # k-w-w1: + c:\k\AddRoutes.ps1 -MasterIp $mip -Gateway "$ClusterCIDR.$counter.2"
    # k-w-w1: + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # k-w-w1:     + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException
    # k-w-w1:     + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,AddRoutes.ps1
    (1..2).each do |i|
        config.vm.define "k-w-w#{i}" do |subconfig|
            subconfig.vm.box = $WindowsImage
            subconfig.vm.communicator = "winrm"
            subconfig.vm.hostname = "k-w-w#{i}"
            subconfig.vm.synced_folder ".", "/vagrant", disabled: true
            #subconfig.vm.synced_folder "../vagrant-synced/kube-win", "c:/k/", type: "smb" #experienced issues with permissions, perhaps user error though
            subconfig.vm.provision "file", source: "../vagrant-synced/kube-win", destination: "c:/k"
            subconfig.vm.provision "shell", path: "./00-windows.ps1", :args => ["-ClusterCIDR", ClusterCIDR], privileged: true
            #subconfig.vm.provision "shell", path: "./01-routes.ps1", :args => ["-ClusterCIDR", ClusterCIDRShort, "-counter", "#{i}"], privileged: true
            subconfig.vm.provider "hyperv" do |h|
                subconfig.vm.network :public_network, bridge: $VirtualSwitchName
                h.enable_virtualization_extensions = true
                h.differencing_disk = true
                h.cpus = 4
                h.memory = 2048
                h.maxmemory = 2048 
                h.vmname = "k-w-w#{i}"
            end
        subconfig.vm.provider "virtualbox" do |v|
                subconfig.vm.network :private_network, type: "dhcp"
                v.linked_clone = true
                v.memory = 1024
                v.cpus = 2
                v.name = "k-w-w#{i}"
            end
        end
    end
end
